{"name":"Plane","tagline":"","body":"Plane - Natp项目\r\n===\r\n###环境要求：\r\n    Ubuntu 12.04\r\n    Python2.7   GNURadio/RTL-SDR dependencies\r\n    probe package (local configure files,command line tools-modes_probe)\r\n    Restful Web Service:Nginx+uWsgi+Django\r\n    MySQL\r\n    Google Earth\r\n###环境实现：\r\n#####Python 2.7 用 Ubuntu 自带即可\r\n#####安装 GNURadio库：\r\n        方法1: 下载最新源码http://gnuradio.org/redmine/projects/gnuradio/wiki \r\n              编译安装\r\n        方法2: wget http://www.sbrac.org/files/build-gnuradio\r\n              chmod +x build-gnuradio\r\n              ./build-gnuradio –verbose\r\n        GNURadio库编译安装时间较⻓长,需80-100分钟\r\n#####安装 rlt-sdr / gr-osmosdr库：\r\n        git clone git://git.osmocom.org/rtl-sdr.git •cd rtl-sdr/\r\n        mkdir build\r\n        cd build\r\n        cmake ../ -DINSTALL_UDEV_RULES=ON \r\n        make\r\n        sudo make install\r\n        sudo ldconfig\r\n        \r\n        git clone git://git.osmocom.org/gr-osmosdr •cd gr-osmosdr/\r\n        mkdir build\r\n        cd build/\r\n        cmake ../\r\n        make\r\n        sudo make install •sudo ldconfig\r\n#####验证 rlt-sdr / gr-osmosdr库 (电视棒接PC)：\r\n        rtl_eeprom •查看rtl-sdr设备信息\r\n        rtl_test •采样测试\r\n        rtl_sdr \r\n        rtl_fm \r\n        rtl_tcp\r\n#####安装 gr-air-modes 工具：\r\n        git clone https://github.com/bistromath/gr-air-modes.git •cd gr-air-modes\r\n        mkdir build\r\n        cd build\r\n        cmake ../\r\n        make\r\n        sudo make install •sudo ldconfig\r\n        测试安装结果：modes_rx –help      modes_gui\r\n#####安装 Ngnix：\r\n        参考：http://wiki.ubuntu.org.cn/Nginx\r\n#####安装 Google Earth：\r\n        参考：http://wiki.ubuntu.com.cn/Google_Earth \r\n###NATP_SERVER:\r\n    信息汇聚检索服务，modes信息导出到KML文件中，DB Schema\r\n    接口report接收natp_probe汇报的请求；\r\n    解析请求中的SQL记录后，写入MySQL数据库中；\r\n    页面展示信息；\r\n    接口定时更新kml输出；\r\n    部署时采用https;\r\n    查询时采用memcached缓存；\r\n###客户端（natp-modes）\r\n前端负责收集飞机信号，并且解码，将结果传送给服务器端。基本上基于gr-air-modes。但是添加了向服务器汇报的功能。包括：数据汇报格式的定义，定时汇报机制，数据加密等。\r\n\r\n#####数据汇报格式\r\n数据汇报格式采用xml1.0，添加了自定义元素sql，probe，content，下面是一个例子：\r\n\r\n\t<?xml version='1.0' encoding='UTF-8'?>\r\n\t<sql>\r\n\t<probe>first_probe</probe>\r\n\t<content>{'values': {'icao': '7867259', 'seen': '2013-11-26 13:29:55', 'speed': '444', 'heading': '7', 'vertical': '-128'}, 'table_name': 'vectors'}\r\n\t</content>\r\n\t<content>{'values': {'icao': '7867259', 'seen': '2013-11-26 13:29:55', 'alt': '35125', 'lat': '40.257568', 'lon': '116.759277'}, 'table_name': 'positions'}\r\n\t</content>\r\n\t<content>{'values': {'icao': '7857259', 'ident': 'CSN3615'}, 'table_name': 'ident'}</content>\r\n\t</sql>\r\n\r\nprobe对应服务器端中的probe数据来源，每一行数据都由content包含，数据含义如下(根据数据含义分成3类)\r\n\r\n\ttable_name对应服务器端的3个数据库表，也代表3中消息类别\r\n\t\r\n\tIdent\r\n\ticao 标识飞机\r\n\tident 飞机航班号\r\n\t\r\n\tVector\r\n\ticao 同上\r\n\tseen，该条消息被解析的时间（可以粗略认为是飞机在该时刻的信息）\r\n\tspeed 飞机水平速度\r\n\theading 以北东南西顺时针方向的角度，北为0度\r\n\tvertical 竖直速度\r\n\t\r\n\tPosition\r\n\ticao 同上\r\n\tseen 同上\r\n\talt  高度（altitude）\r\n\tlat  纬度（latitude）\r\n\tlon  经度（longtitude）\r\n\t\r\n#####定时汇报机制\r\n每个客户端都有一个配置文件，文件内容如下\r\n\r\n\t[general]\r\n\r\n\tlog_file = XXXX/natp_modes.log\r\n\tprobe_name = first_probe\r\n\r\n\t[net_reporter]\r\n\tendpoint = http://XXXX/report/\r\n\ttimeout = 180s\r\n\tmax_rep_num = 200\r\n\tclient_cert = XXXXXX/client.crt\r\n\tca_cert = XXXXX/ca.crt\r\n\t\r\n其中timeout为每隔多少时间汇报一次(如果消息个数未0则不汇报)，而max_rep_num是每次汇报的大小（以免数据过大，传送失败，以及考虑服务器端处理事件）\r\n\r\n#####数据加密\r\n客户端传送数据到服务器端采用https协议，保证数据的安全。\r\n\r\n###服务器端\r\n服务器端集中处理客户端发送过来的数据，并进行展示(展示包括数据展示以及google KML文件导出展示)。主要技术包括：使用nginx服务器，django框架，https的支持，系统后台任务调度，查询缓存等。\r\n\r\n#####系统后台任务调度\r\n由于多个客户端同时发送数据到服务器端，以及数据动态导出展示需要，增加系统后台任务调度功能。利用celery（开源项目，自称是分布式任务调度队列）来实现服务器不处理请求，而将任务交给系统的celery守护进程处理。\r\n\r\n#####查询缓存\r\n由于每次请求查询数据都需要很多时间，利用memcache缓存系统，通过将相同请求中的第一次请求结果存储，来实现快速查询。\r\n\r\n#####google kml文件导出算法\r\n导出支持动态和静态导出，静态导出则根据给定的时间范围导出一个kml文件，并下载给用户，用户通过google earth等工具查看飞机。动态导出则是给定一个kml的url给用户，用户也是通过google earth查看，但是这个kml文件内容会动态变化，根据用户给定的时间间隔，生成给定时间内的飞机信息。  \r\n生成kml算法\r\n\r\n\tInput: start：开始时间\r\n\t\t   end：结束时间\r\n\t\t   freq：查询飞机时间范围长度\r\n\t\t   window_size: 查询飞机信息的历史时间\r\n\tOutput: 包含飞机信息kml格式的文件\r\n\t\r\n\tcursor: initially equals start\r\n\tfront: initially equals start + freq\r\n\tback: initially equals start - window_size\r\n\t\r\n\t\twhile True:\r\n\t\t\tback = cursor - window_size\r\n\t\t\tcursor = front\r\n\t\t\tfront = front + freq\r\n\t\t\t\r\n\t\t\tif front < end:\r\n\t\t\t\tkml = search(back, front)\r\n\t\t\telif front > end:\r\n\t\t\t\tfront = end\r\n\t\t\t\tkml = search(back, front)\r\n\t\t\telse:\r\n\t\t\t\tkml = search(back, front)\r\n\t\t\t\tbreak\r\n\t\t\t\t\r\n\r\n    \r\n    \r\n    \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}